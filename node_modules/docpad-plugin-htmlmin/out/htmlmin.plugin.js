// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module.exports = function(BasePlugin) {
  var HtmlMinPlugin;
  return HtmlMinPlugin = (function(_super) {
    __extends(HtmlMinPlugin, _super);

    HtmlMinPlugin.prototype.name = 'htmlmin';

    HtmlMinPlugin.prototype.config = {
      htmlminOptions: {
        removeComments: true,
        removeCommentsFromCDATA: false,
        removeCDATASectionsFromCDATA: false,
        collapseWhitespace: true,
        collapseBooleanAttributes: false,
        removeAttributeQuotes: false,
        removeRedundantAttributes: false,
        useShortDoctype: false,
        removeEmptyAttributes: false,
        removeOptionalTags: false,
        removeEmptyElements: false
      }
    };

    function HtmlMinPlugin() {
      HtmlMinPlugin.__super__.constructor.apply(this, arguments);
      this.htmlmin = require('html-minifier').minify;
      this;
    }

    HtmlMinPlugin.prototype.render = function(opts, next) {
      var config, htmlminOptions, inExtension, key, outExtension, templateData, value, _ref, _ref1;
      inExtension = opts.inExtension, outExtension = opts.outExtension, templateData = opts.templateData;
      config = this.config;
      if ((inExtension === 'htmlmin') && (outExtension === 'html' || outExtension === null)) {
        htmlminOptions = config.htmlminOptions;
        if (templateData.htmlmin) {
          _ref = templateData.htmlmin;
          for (key in _ref) {
            if (!__hasProp.call(_ref, key)) continue;
            value = _ref[key];
            htmlminOptions[key] = value;
          }
        }
        if (templateData.document.htmlmin) {
          _ref1 = templateData.document.htmlmin;
          for (key in _ref1) {
            if (!__hasProp.call(_ref1, key)) continue;
            value = _ref1[key];
            htmlminOptions[key] = value;
          }
        }
        opts.content = this.htmlmin(opts.content, htmlminOptions);
      }
      return next();
    };

    return HtmlMinPlugin;

  })(BasePlugin);
};
